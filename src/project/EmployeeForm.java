/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import javax.swing.table.DefaultTableModel;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Formatter;
import java.util.Scanner;
import javax.swing.JOptionPane;
import static project.Project.dptr;
import static project.Project.empList;
import static project.Project.readEmployee;

/**
 *
 * @author Jake Langreck
 */
public class EmployeeForm extends javax.swing.JFrame {

    public EmployeeForm() {
        initComponents();

        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        Date today = new Date();
        Date dateTest = new Date();

        empList = readEmployee("Employees.txt");
        DefaultTableModel model = (DefaultTableModel) tbEmployees.getModel();

        EmployeeNode temp = empList.getHead();

        int rows = model.getRowCount();
        for (int i = 0; i < rows; i++) {
            model.removeRow(0);
        }

        temp = empList.getHead();
        for (int i = 0; i < empList.size(); i++) {
            Date hire = new Date(temp.getHireDate());

            if (temp.getEndDate().equals("N/A")) {
                Date end = new Date("12/12/9999");
                dateTest = end;
            } else {
                Date end = new Date(temp.getEndDate());
                dateTest = end;
            }

            if (dateTest.after(today)) {
                model.addRow(new Object[]{temp.getEmployeeID(), temp.getLastName(), temp.getFirstName(), temp.getGender(), temp.getPhone(), temp.getEmail(), temp.getHireDate(), temp.getEndDate()});
            }
            temp = temp.getNext();
        }

//        empList = readEmployee("Employees.txt");
//        DefaultTableModel model = (DefaultTableModel) tbEmployees.getModel();
//
//        EmployeeNode temp = empList.getHead();
//        for (int i = 0; i < empList.size(); i++) {
//
//            model.addRow(new Object[]{temp.getEmployeeID(), temp.getLastName(), temp.getFirstName(), temp.getGender(), temp.getPhone(), temp.getEmail(), temp.getHireDate(), temp.getEndDate()});
//
//            temp = temp.getNext();
//        }
    }

    public void close() {
        WindowEvent winClosingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbEmployees = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        rbMale = new javax.swing.JRadioButton();
        rbFemale = new javax.swing.JRadioButton();
        tbFirstName = new javax.swing.JTextField();
        tbSSN = new javax.swing.JTextField();
        tbEmplyID = new javax.swing.JTextField();
        tbLastName = new javax.swing.JTextField();
        tbEmail = new javax.swing.JTextField();
        tbPhone = new javax.swing.JTextField();
        bnAdd = new javax.swing.JButton();
        bnUpdate = new javax.swing.JButton();
        bnCurrent = new javax.swing.JButton();
        bnPast = new javax.swing.JButton();
        lbTest = new java.awt.Label();
        jdHire = new com.toedter.calendar.JDateChooser();
        jdEnd = new com.toedter.calendar.JDateChooser();
        errLast = new java.awt.Label();
        errSocial = new java.awt.Label();
        errFirst = new java.awt.Label();
        errID = new java.awt.Label();
        errPhone = new java.awt.Label();
        errEmail = new java.awt.Label();
        errDate = new java.awt.Label();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 51, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Jamming Jelly Employees");

        tbEmployees.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Last Name", "First Name", "Gender", "Phone", "Email", "Hire Date", "End Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbEmployees.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbEmployeesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbEmployees);

        jLabel1.setText("First Name:");

        jLabel3.setText("Last Name:");

        jLabel4.setText("SS#:");

        jLabel5.setText("EmpyID:");

        jLabel6.setText("Phone:");

        jLabel7.setText("Email:");

        jLabel8.setText("Hire Date:");

        jLabel9.setText("End Date:");

        jLabel10.setText("Gender:");

        buttonGroup1.add(rbMale);
        rbMale.setText("Male");

        buttonGroup1.add(rbFemale);
        rbFemale.setText("Female");

        tbPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbPhoneActionPerformed(evt);
            }
        });

        bnAdd.setText("Add");
        bnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnAddActionPerformed(evt);
            }
        });

        bnUpdate.setText("Update");
        bnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnUpdateActionPerformed(evt);
            }
        });

        bnCurrent.setText("Current");
        bnCurrent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnCurrentActionPerformed(evt);
            }
        });

        bnPast.setText("Past");
        bnPast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnPastActionPerformed(evt);
            }
        });

        lbTest.setText("label1");

        jdHire.setDateFormatString("MM/dd/yyyy");

        jdEnd.setDateFormatString("MM/dd/yyyy");

        errLast.setForeground(new java.awt.Color(255, 0, 51));

        errSocial.setForeground(new java.awt.Color(255, 51, 51));

        errFirst.setForeground(new java.awt.Color(255, 0, 0));

        errID.setForeground(new java.awt.Color(255, 0, 51));

        errPhone.setForeground(new java.awt.Color(255, 0, 51));

        errEmail.setForeground(new java.awt.Color(255, 51, 51));

        errDate.setForeground(new java.awt.Color(255, 0, 0));

        jMenuBar2.setBackground(new java.awt.Color(153, 102, 255));

        jMenu2.setBackground(new java.awt.Color(204, 102, 255));
        jMenu2.setForeground(new java.awt.Color(255, 255, 102));
        jMenu2.setText("Home");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar2.add(jMenu2);

        jMenu3.setBackground(new java.awt.Color(204, 102, 255));
        jMenu3.setForeground(new java.awt.Color(255, 255, 102));
        jMenu3.setText("Employees");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar2.add(jMenu3);

        jMenu4.setBackground(new java.awt.Color(204, 51, 255));
        jMenu4.setForeground(new java.awt.Color(255, 255, 102));
        jMenu4.setText("Departments");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenuBar2.add(jMenu4);

        jMenu5.setBackground(new java.awt.Color(204, 51, 255));
        jMenu5.setForeground(new java.awt.Color(255, 255, 102));
        jMenu5.setText("Assignments");
        jMenu5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu5MouseClicked(evt);
            }
        });
        jMenuBar2.add(jMenu5);

        jMenu6.setBackground(new java.awt.Color(204, 51, 255));
        jMenu6.setForeground(new java.awt.Color(255, 255, 102));
        jMenu6.setText("Payroll");
        jMenu6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu6MouseClicked(evt);
            }
        });
        jMenuBar2.add(jMenu6);

        jMenu7.setBackground(new java.awt.Color(204, 51, 255));
        jMenu7.setForeground(new java.awt.Color(255, 255, 102));
        jMenu7.setText("Close");
        jMenu7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu7MouseClicked(evt);
            }
        });
        jMenuBar2.add(jMenu7);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbTest, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbMale))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbFemale)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(tbFirstName)
                            .addComponent(tbSSN)
                            .addComponent(tbEmplyID, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tbLastName)
                            .addComponent(tbEmail)
                            .addComponent(tbPhone)
                            .addComponent(jdHire, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jdEnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(errFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(errLast, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(errSocial, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(errID, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(errPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(errEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bnCurrent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bnPast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(errDate, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 742, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tbFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tbLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tbSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(errSocial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tbEmplyID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(tbPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(tbEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(errEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jdHire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jdEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbMale)
                    .addComponent(rbFemale))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bnAdd)
                .addGap(8, 8, 8)
                .addComponent(bnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bnCurrent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bnPast))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(errDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(lbTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu7MouseClicked
        // TODO add your handling code here:
        // Project.writefiles(); 
        dispose();
    }//GEN-LAST:event_jMenu7MouseClicked

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        // TODO add your handling code here:
        close();
        MainForm m = new MainForm();
        m.setVisible(true);

    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        // TODO add your handling code here:
        close();
        DepartmentForm d = new DepartmentForm();
        d.setVisible(true);

    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenu5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu5MouseClicked
        // TODO add your handling code here:
        close();
        AssignmentForm a = new AssignmentForm();
        a.setVisible(true);

    }//GEN-LAST:event_jMenu5MouseClicked

    private void jMenu6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu6MouseClicked
        // TODO add your handling code here:
        close();
        PayrollForm p = new PayrollForm();
        p.setVisible(true);

    }//GEN-LAST:event_jMenu6MouseClicked

    private void tbPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tbPhoneActionPerformed

    private void bnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnUpdateActionPerformed

        DefaultTableModel model = (DefaultTableModel) tbEmployees.getModel();
        empList = readEmployee("Employees.txt");
        EmployeeNode empTest = empList.getHead();
        resetError();
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        int selectedRow = tbEmployees.getSelectedRow();
        String empID = tbEmployees.getValueAt(selectedRow, 0).toString();
        String ed = dateFormat.format(jdEnd.getDate());
        String hd = tbEmployees.getValueAt(selectedRow, 6).toString();
        Date hireTest = new Date(hd);
        String response = validateDate(hireTest, jdEnd.getDate());
        
        
        
        if (response.equals("")) {
            if (ed.equals("12/12/9999")){
                ed = "N/A";
            }
            //lbTest.setText(String.valueOf(validate));
            for (int j = 0; j < empList.size(); j++) {
                if (empID.equals(empTest.getEmployeeID())) {
                    empTest.setEndDate(ed);
                }

                empTest = empTest.getNext();
            }

            Project.addEmpRecords(empList);
            Project.closeFile();

            //DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
            Date today = new Date();
            Date dateTest = new Date();

            empList = readEmployee("Employees.txt");
            // DefaultTableModel model = (DefaultTableModel) tbEmployees.getModel();

            EmployeeNode temp = empList.getHead();

            int rows = model.getRowCount();
            for (int i = 0; i < rows; i++) {
                model.removeRow(0);
            }

            temp = empList.getHead();
            for (int i = 0; i < empList.size(); i++) {
                Date hire = new Date(temp.getHireDate());

                if (temp.getEndDate().equals("N/A")) {
                    Date end = new Date("12/12/9999");
                    dateTest = end;
                } else {
                    Date end = new Date(temp.getEndDate());
                    dateTest = end;
                }

                if (dateTest.after(today)) {
                    model.addRow(new Object[]{temp.getEmployeeID(), temp.getLastName(), temp.getFirstName(), temp.getGender(), temp.getPhone(), temp.getEmail(), temp.getHireDate(), temp.getEndDate()});
                }
                temp = temp.getNext();
            }
        } else {
            errDate.setText(response);
        }

    }//GEN-LAST:event_bnUpdateActionPerformed

    private void bnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnAddActionPerformed
        int validate = 0;
        DefaultTableModel model = (DefaultTableModel) tbEmployees.getModel();
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        resetError();
        //gender validation:
        String gender = "";
        if (rbFemale.isSelected()) {
            gender = "Female";
            validate++;
        }
        if (rbMale.isSelected()) {
            gender = "Male";
            validate++;
        }
        if (!rbMale.isSelected() & !rbFemale.isSelected()) {
            String message = "Please select a gender.";
            String titleBar = "Gender";
            informationMessage(message, titleBar);
        }

        //first name validation:
        tbFirstName.setText(tbFirstName.getText().trim());
        if (tbFirstName.getText().trim().equals("")) {
            errFirst.setText("Please enter a first name.");

        } else {
            if (!validateFirstName(tbFirstName.getText().substring(0, 1).toUpperCase() + tbFirstName.getText().substring(1))) {
                errFirst.setText("Please only enter letters for first name.");

            } else {
                validate++;
            }
        }

        //employeeID validation:
        tbEmplyID.setText(tbEmplyID.getText().trim());
        if (tbEmplyID.getText().trim().equals("")) {
            errID.setText("Please enter an Employee ID.");

        } else {
            if (!validateID(tbEmplyID.getText())) {
                errID.setText("Please enter a valid ID. Example: JJ12345");

            } else {
                validate++;

            }
        }

        //last name validation:
        tbLastName.setText(tbLastName.getText().trim());
        if (tbLastName.getText().trim().equals("")) {
            errLast.setText("Please enter a last name.");

        } else {
            if (!validateLastName(tbLastName.getText())) {
                errLast.setText("Please only enter letters for last name.");

            } else {
                validate++;
                if (!tbLastName.getText().contains("'")) {
                    String lastName = tbLastName.getText().substring(0, 1).toUpperCase() + tbLastName.getText().substring(1);
                    tbLastName.setText(lastName);
                }

            }
        }

        //phone validation:
        tbPhone.setText(tbPhone.getText().trim());
        if (tbPhone.getText().trim().equals("")) {
            errPhone.setText("Please enter a phone number.");

        } else {
            if (!validatePhone(tbPhone.getText())) {
                errPhone.setText("Please enter a valid phone number.");
            } else {
                validate++;
            }
        }

        //email validation:
        tbEmail.setText(tbEmail.getText().trim());
        if (tbEmail.getText().trim().equals("")) {
            errEmail.setText("Please enter an email address.");

        } else {
            if (!validateEmail(tbEmail.getText())) {
                errEmail.setText("Please enter a valid email address.");
            } else {
                validate++;
            }
        }

        //validate Social:
        tbSSN.setText(tbSSN.getText().trim());
        if (tbSSN.getText().trim().equals("")) {
            errSocial.setText("Please enter a social security number.");

        } else {
            if (!validateSocial(tbSSN.getText())) {
                errSocial.setText("Please enter a valid social security number.");
            } else {
                validate++;
            }
        }

        //date validation
        Date hireDate;
        Date endDate;
        hireDate = jdHire.getDate();
        endDate = jdEnd.getDate();
        String hd = "";
        String ed;

        if (hireDate == null) {
            errDate.setText("Please enter a Hire Date.");

        } else {
            hd = dateFormat.format(jdHire.getDate());
        }

        if (endDate == null) {
            ed = "N/A";
        } else {
            ed = dateFormat.format(jdEnd.getDate());
        }

        String response = validateDate(hireDate, endDate);

        if (hireDate != null) {
            if (response.equals("")) {
                validate++;
            } else {
                errDate.setText(response);
            }
        }

        if (validate == 8) {
            String firstName = tbFirstName.getText().substring(0, 1).toUpperCase() + tbFirstName.getText().substring(1);

            model.addRow(new Object[]{tbEmplyID.getText(), tbLastName.getText(), firstName, gender, formatThis(tbPhone.getText()), tbEmail.getText(), hd, ed});

            empList = readEmployee("Employees.txt");
            empList.add(tbFirstName.getText(), tbLastName.getText(), gender, formatSocial(tbSSN.getText()), tbEmplyID.getText(), formatThis(tbPhone.getText()), tbEmail.getText(), hd, ed);
            Project.addEmpRecords(empList);
            Project.closeFile();

            resetText();
            resetError();

        }

    }//GEN-LAST:event_bnAddActionPerformed

    private void bnCurrentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnCurrentActionPerformed
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        Date today = new Date();
        Date dateTest = new Date();
        resetError();
        resetText();
        empList = readEmployee("Employees.txt");
        DefaultTableModel model = (DefaultTableModel) tbEmployees.getModel();

        EmployeeNode temp = empList.getHead();

        int rows = model.getRowCount();
        for (int i = 0; i < rows; i++) {
            model.removeRow(0);
        }

        temp = empList.getHead();
        for (int i = 0; i < empList.size(); i++) {
            Date hire = new Date(temp.getHireDate());

            if (temp.getEndDate().equals("N/A")) {
                Date end = new Date("12/12/9999");
                dateTest = end;
            } else {
                Date end = new Date(temp.getEndDate());
                dateTest = end;
            }

            if (dateTest.after(today)) {
                model.addRow(new Object[]{temp.getEmployeeID(), temp.getLastName(), temp.getFirstName(), temp.getGender(), temp.getPhone(), temp.getEmail(), temp.getHireDate(), temp.getEndDate()});
            }
            temp = temp.getNext();
        }
    }//GEN-LAST:event_bnCurrentActionPerformed

    private void bnPastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnPastActionPerformed
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        Date today = new Date();
        Date dateTest = new Date();
        resetError();
        resetText();
        empList = readEmployee("Employees.txt");
        DefaultTableModel model = (DefaultTableModel) tbEmployees.getModel();

        EmployeeNode temp = empList.getHead();

        int rows = model.getRowCount();
        for (int i = 0; i < rows; i++) {
            model.removeRow(0);
        }

        temp = empList.getHead();
        for (int i = 0; i < empList.size(); i++) {
            Date hire = new Date(temp.getHireDate());

            if (temp.getEndDate().equals("N/A")) {
                Date end = new Date("12/12/9999");
                dateTest = end;
            } else {
                Date end = new Date(temp.getEndDate());
                dateTest = end;
            }

            if (dateTest.before(today)) {
                model.addRow(new Object[]{temp.getEmployeeID(), temp.getLastName(), temp.getFirstName(), temp.getGender(), temp.getPhone(), temp.getEmail(), temp.getHireDate(), temp.getEndDate()});
            }
            temp = temp.getNext();
        }
    }//GEN-LAST:event_bnPastActionPerformed

    private void tbEmployeesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbEmployeesMouseClicked
        //DefaultTableModel model = (DefaultTableModel) tbEmployees.getModel();
        int selectedRow = tbEmployees.getSelectedRow();
        resetError();
        resetText();
        Date displayDate = new Date();
        if (tbEmployees.getValueAt(selectedRow, 7).toString().equals("N/A")) {
            Date date = new Date("12/12/9999");
            displayDate = date;
        } else {
            Date date = new Date(tbEmployees.getValueAt(selectedRow, 7).toString());
            displayDate = date;
        }
        jdEnd.setDate(displayDate);

    }//GEN-LAST:event_tbEmployeesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    //first name validation
    public static boolean validateFirstName(String firstName) {
        return firstName.matches("[A-Z][a-zA-Z]*");

    }

    public static String validateDate(Date hire, Date end) {
        String response = "";
        Date infinite = new Date("12/31/9999");
        if (end == null) {
            end = infinite;
        }
        if (hire != null) {

            if (hire.after(end)) {
                response = "Hire Date must be before End Date";
            }

        }
        return response;
    }
    //last name validation

    public static boolean validateLastName(String lastName) {
        return lastName.matches("[a-zA-z]+(['-][a-zA-Z]+)*");
    }

    public static void informationMessage(String message, String titleBar) {
        JOptionPane.showMessageDialog(null, message, "ERROR: " + titleBar, JOptionPane.ERROR_MESSAGE);
    }

    public static String formatSocial(String temp) {
        char[] charArray = temp.toCharArray();
        int count = 0;
        String social = "";
        for (char character : charArray) {
            if (Character.isDigit(character)) {
                social = social + character;
                count++;
                if (count == 3 || count == 5) {
                    social = social + "-";
                }
            }
        }
        return social;
    }

    public static String formatThis(String temp) {
        char[] charArray = temp.toCharArray();
        int count = 0;
        String phoneNumber = "";
        for (char character : charArray) {

            if (Character.isDigit(character)) {
                phoneNumber = phoneNumber + character;
                count++;
                if (count == 3 || count == 6) {
                    phoneNumber = phoneNumber + "-";
                }
            }
        }
        return phoneNumber;
    }

    public static boolean validateSocial(String social) {
        int val = 0;

        if (social.matches("[1-9]\\d{2}[-][1-9]\\d{1}[-][1-9]\\d{3}")) {
            val++;
        }

        if (social.matches("[1-9]\\d{2}[ ][1-9]\\d{1}[ ][1-9]\\d{3}")) {
            val++;
        }

        if (social.matches("[1-9]\\d{8}")) {
            val++;
        }

        if (val == 1) {
            return true;
        } else {
            return false;
        }
    }

    public static boolean validatePhone(String phone) {
        int val = 0;

        if (phone.matches("[1-9]\\d{2}[.][1-9]\\d{2}[.][1-9]\\d{3}")) {
            val++;
        }

        if (phone.matches("[1-9]\\d{9}")) {
            val++;
        }

        if (phone.matches("[1-9]\\d{2}-[1-9]\\d{2}-\\d{4}")) {
            val++;
        }

        if (phone.matches("[(][1-9]\\d{2}[)][1-9]\\d{2}[-][1-9]\\d{3}")) {
            val++;
        }

        if (val == 1) {
            return true;
        } else {
            return false;
        }
    }

    public static boolean validateID(String ID) {
        return ID.matches("[J][J][1-9]*");
    }

    public static boolean validateEmail(String email) {
        return email.matches("[a-zA-z1-9.]+[@][a-zA-Z1-9]+[.][a-z]+");
    }

    private void resetError() {
        errFirst.setText("");
        errLast.setText("");
        errPhone.setText("");
        errSocial.setText("");
        errID.setText("");
        errDate.setText("");
        errEmail.setText("");
    }

    private void resetText() {
        tbFirstName.setText("");
        tbLastName.setText("");
        tbPhone.setText("");
        tbEmail.setText("");
        tbSSN.setText("");
        tbEmplyID.setText("");
        jdHire.setDate(null);
        jdEnd.setDate(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnAdd;
    private javax.swing.JButton bnCurrent;
    private javax.swing.JButton bnPast;
    private javax.swing.JButton bnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private java.awt.Label errDate;
    private java.awt.Label errEmail;
    private java.awt.Label errFirst;
    private java.awt.Label errID;
    private java.awt.Label errLast;
    private java.awt.Label errPhone;
    private java.awt.Label errSocial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JDateChooser jdEnd;
    private com.toedter.calendar.JDateChooser jdHire;
    private java.awt.Label lbTest;
    private javax.swing.JRadioButton rbFemale;
    private javax.swing.JRadioButton rbMale;
    private javax.swing.JTextField tbEmail;
    private javax.swing.JTable tbEmployees;
    private javax.swing.JTextField tbEmplyID;
    private javax.swing.JTextField tbFirstName;
    private javax.swing.JTextField tbLastName;
    private javax.swing.JTextField tbPhone;
    private javax.swing.JTextField tbSSN;
    // End of variables declaration//GEN-END:variables
}
